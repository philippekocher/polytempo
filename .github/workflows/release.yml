name: Release

on:
#  push:
#    tags:
#    - '[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:
    inputs:
      version:
        description: Release Version
        default: 0.0.1
        required: true
      
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  PROJECT_NAME_NETWORK: PolytempoNetwork
  PROJECT_NAME_COMPOSER: PolytempoComposer
  NETWORK_DIR: 'POLYTEMPO NETWORK'
  COMPOSER_DIR: 'POLYTEMPO COMPOSER'
  BUILD_DIR: build
  
jobs:
  build:
    name: ${{ matrix.artifact }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
        - os: ubuntu-latest
          artifact: Linux
        - os: windows-latest
          artifact: Windows
        - os: macos-latest
          artifact: MacOS
    
    steps:
    - name: Get the version
      id: get_version
      shell: bash
      #run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      run: echo ::set-output name=VERSION::${{github.event.inputs.version}}
      
    - name: Checkout Code
      uses: actions/checkout@v2
      
    - name: Checkout submodules
      run: git submodule update --init --recursive --depth 1
      
    - if: ${{ runner.os == 'Linux' }}
      name: Install JUCE dependencies (Linux only)
      id: juce_dependencies
      run: | 
        sudo apt-get install -y g++ libgtk-3-dev libfreetype6-dev libx11-dev libxinerama-dev libxrandr-dev libxcursor-dev mesa-common-dev libasound2-dev freeglut3-dev libxcomposite-dev libcurl4-openssl-dev
        sudo add-apt-repository -y ppa:webkit-team && sudo apt-get update
        sudo apt-get install libwebkit2gtk-4.0-37 libwebkit2gtk-4.0-dev
        
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/${{ env.BUILD_DIR }}

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/${{ env.BUILD_DIR }}
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/${{ env.BUILD_DIR }}
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    #- name: Zip 
    #  working-directory: ${{runner.workspace}}/${{ env.BUILD_DIR }}
    #  run: cmake -E tar cfv ${{ env.PROJECT_NAME_NETWORK }}-${{ matrix.artifact }}.zip --format=zip ${{env.NETWORK_DIR}}/${{ env.PROJECT_NAME_NETWORK }}_artefacts/${{ env.BUILD_TYPE }}

    #- name: Upload Artifact
    #  uses: actions/upload-artifact@v2
    #  with:
    #    path: ${{runner.workspace}}/${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME_NETWORK }}-${{ matrix.artifact }}.zip
    #    name: ${{ env.PROJECT_NAME_NETWORK }}-${{ matrix.artifact }}

    - name: Upload Artifact Polytempo Network
      uses: actions/upload-artifact@v2
      with:
        path: ${{runner.workspace}}/${{ env.BUILD_DIR }}/${{env.NETWORK_DIR}}/${{ env.PROJECT_NAME_NETWORK }}_artefacts/${{ env.BUILD_TYPE }}/${{env.PROJECT_NAME_NETWORK}}.exe
        name: ${{ env.PROJECT_NAME_NETWORK }}-${{ matrix.artifact }}

    - name: Upload Artifact Polytempo Composer
      uses: actions/upload-artifact@v2
      with:
        path: ${{runner.workspace}}/${{ env.BUILD_DIR }}/${{env.COMPOSER_DIR}}/${{ env.PROJECT_NAME_COMPOSER }}_artefacts/${{ env.BUILD_TYPE }}/${{env.PROJECT_NAME_COMPOSER}}.exe
        name: ${{ env.PROJECT_NAME_COMPOSER }}-${{ matrix.artifact }}

# create release
#    - name: Create Release
#      id: create_release
#      uses: actions/create-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        tag_name: ${{ github.ref }}
#        release_name: Release ${{ github.ref }}
#        draft: false
#        prerelease: false

# upload asset
#    - name: Upload Release Asset
#      id: upload-release-asset
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }} 
#        asset_path: ${{runner.workspace}}/${{ env.BUILD_DIR }}/${{env.NETWORK_DIR}}/${{ env.PROJECT_NAME_NETWORK }}_artefacts/${{ env.BUILD_TYPE }}/${{env.PROJECT_NAME_NETWORK}}.exe
#        asset_name: ${{env.PROJECT_NAME_NETWORK}}_${{ steps.get_version.outputs.VERSION }}.exe
#        asset_content_type: application/x-executable